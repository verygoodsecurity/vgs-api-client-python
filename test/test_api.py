"""
    Very Good Security (VGS) API

    The VGS API is organized around REST. Our API is built with a predictable resource-oriented structure, uses JSON-encoded requests and responses, follows standard HTTP verbs/responses, and uses industry standard authentication.   # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: support@verygoodsecurity.com
    Generated by: https://openapi-generator.tech
"""

import os
import re
from pprint import pprint

import pytest
import vgs_api_client
from vgs_api_client.api import aliases_api
from vgs_api_client.model.alias_format import AliasFormat
from vgs_api_client.model.create_aliases_request import CreateAliasesRequest
from vgs_api_client.model.create_aliases_request_new import CreateAliasesRequestNew
from vgs_api_client.model.update_alias_request import UpdateAliasRequest
from vgs_api_client.model.update_alias_request_data import UpdateAliasRequestData

# Defining the host is optional and defaults to https://api.sandbox.verygoodvault.com
# See configuration.py for a list of all supported configuration parameters.
configuration = vgs_api_client.Configuration(
    host=os.environ.get("VAULT_API_BASE_URI", "https://api.sandbox.verygoodvault.com")
)

# The client must configure the authentication and authorization parameters
# in accordance with the API server security policy.
# Examples for each auth method are provided below, use the example that
# satisfies your auth use case.

# Configure HTTP basic authorization: basicAuth
configuration = vgs_api_client.Configuration(
    username=os.environ["VAULT_API_USERNAME"], password=os.environ["VAULT_API_PASSWORD"]
)


@pytest.fixture
def configured_api():
    with vgs_api_client.ApiClient(configuration) as api_client:
        yield api_client


@pytest.fixture
def configured_aliases_api(configured_api):
    return aliases_api.AliasesApi(configured_api)


@pytest.fixture
def create_alias_request():
    return CreateAliasesRequest(
        data=[
            CreateAliasesRequestNew(
                format=AliasFormat("UUID"), value="4111-1111-1111-1111", classifiers=["credit-card"]
            )
        ],
    )  # CreateAliasesRequest |  (optional)


@pytest.fixture
def create_aliases_request():
    return CreateAliasesRequest(
        data=[
            CreateAliasesRequestNew(
                format=AliasFormat("UUID"), value="122105155", classifiers=["bank-account"]
            ),
            CreateAliasesRequestNew(
                format=AliasFormat("UUID"), value="122105156", classifiers=["bank-account"]
            ),
        ],
    )  # CreateAliasesRequest |  (optional)


@pytest.fixture
def update_alias_request():
    return UpdateAliasRequest(
        UpdateAliasRequestData(classifiers=["visa-credit-card", "personal-data"])
    )  # UpdateAliasesRequest |  (optional)


"""AliasesApi unit test stubs"""


def test_create_aliases(configured_aliases_api, create_aliases_request):
    """Test case for create_aliases

    Create aliases  # noqa: E501
    """
    try:
        api_response = configured_aliases_api.create_aliases(
            create_aliases_request=create_aliases_request
        )

        pprint(api_response)
    except vgs_api_client.ApiException:
        raise

    assert len(api_response["data"]) == 2
    for index, fixture in enumerate(["122105155", "122105156"]):
        assert api_response["data"][index]["value"] == fixture
        assert "bank-account" in api_response["data"][index]["classifiers"]
        assert re.match(r"tok_sandbox_.+", api_response["data"][index]["aliases"][0]["alias"])


def test_delete_alias(configured_aliases_api, create_alias_request):
    """Test case for delete_alias

    Delete alias  # noqa: E501
    """
    api_response = configured_aliases_api.create_aliases(
        create_aliases_request=create_alias_request
    )

    pprint(create_aliases_request)
    asserts = 0
    for result in api_response["data"]:
        for alias in result["aliases"]:
            deleted = configured_aliases_api.delete_alias(alias["alias"])
            assert deleted is None
            asserts += 1
    assert asserts == 1


def test_reveal_alias(configured_aliases_api, create_alias_request):
    """Test case for reveal_alias

    Reveal single alias  # noqa: E501
    """
    api_response = configured_aliases_api.create_aliases(
        create_aliases_request=create_alias_request
    )
    asserts = 0
    for result in api_response["data"]:
        for alias in result["aliases"]:
            revealed = configured_aliases_api.reveal_alias(alias["alias"])
            assert len(revealed["data"])
            assert revealed["data"][0]["value"]
            assert "credit-card" in revealed["data"][0]["classifiers"]
            asserts += 1
    assert asserts == 1


def test_reveal_multiple_aliases(configured_aliases_api, create_aliases_request):
    """Test case for reveal_multiple_aliases

    Reveal multiple aliases  # noqa: E501
    """
    api_response = configured_aliases_api.create_aliases(
        create_aliases_request=create_aliases_request
    )
    revealed = configured_aliases_api.reveal_multiple_aliases(
        ",".join(
            [api_response.data[0].aliases[0]["alias"], api_response.data[1].aliases[0]["alias"]]
        )
    )
    asserts = 0
    for result in revealed.data:
        assert len(revealed.data[result]["aliases"])
        assert revealed.data[result]["value"]
        assert "bank-account" in revealed.data[result]["classifiers"]
        asserts += 1
    assert asserts == 2


def test_update_alias(configured_aliases_api, create_alias_request, update_alias_request):
    """Test case for update_alias

    Update data classifiers  # noqa: E501
    """
    api_response = configured_aliases_api.create_aliases(
        create_aliases_request=create_alias_request
    )
    asserts = 0
    for result in api_response["data"]:
        for alias in result["aliases"]:
            updated = configured_aliases_api.update_alias(
                alias["alias"], update_alias_request=update_alias_request
            )
            assert updated is None
            asserts += 1
    assert asserts == 1
